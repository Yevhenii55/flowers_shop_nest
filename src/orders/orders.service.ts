import { Injectable, NotFoundException, BadRequestException } from '@nestjs/common';
import { InjectRepository } from '@nestjs/typeorm';
import { Repository } from 'typeorm';
import { Order } from './orders.entity';
import { User } from '../user/user.entity';
import { Cart } from '../cart/cart.entity';
import { Product } from '../products/product.entity';

@Injectable()
export class OrderService {
  constructor(
    @InjectRepository(Order)
    private readonly orderRepository: Repository<Order>,

    @InjectRepository(User)
    private readonly userRepository: Repository<User>,

    @InjectRepository(Cart)
    private readonly cartRepository: Repository<Cart>,

    @InjectRepository(Product)
    private readonly productRepository: Repository<Product>,
  ) {}

  /**
   * –°—Ç–≤–æ—Ä—é—î –Ω–æ–≤–∏–π –æ—Ä–¥–µ—Ä –Ω–∞ –æ—Å–Ω–æ–≤—ñ –∫–æ—à–∏–∫–∞ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
   */
  async createOrder(email: string): Promise<Order> {
    // üîπ 1. –ó–Ω–∞–π—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑–∞ email
    const user = await this.userRepository.findOne({ where: { email }, relations: ['cart', 'cart.products'] });

    if (!user) {
      throw new NotFoundException(`–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á —ñ–∑ email ${email} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∏–π`);
    }

    // üîπ 2. –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏, —á–∏ —î —É –Ω—å–æ–≥–æ –∫–æ—à–∏–∫
    if (!user.cart || user.cart.products.length === 0) {
      throw new BadRequestException(`–ö–æ—à–∏–∫ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ ${email} –ø–æ—Ä–æ–∂–Ω—ñ–π`);
    }

    // üîπ 3. –û—Ç—Ä–∏–º–∞—Ç–∏ –≤—Å—ñ –ø—Ä–æ–¥—É–∫—Ç–∏ –∑ –∫–æ—à–∏–∫–∞
    const products = user.cart.products;

    // üîπ 4. –°—Ç–≤–æ—Ä–∏—Ç–∏ –Ω–æ–≤–∏–π –æ—Ä–¥–µ—Ä
    const order = this.orderRepository.create({
      user,
      products,
      status: 'pending', // –ó–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º
    });

    await this.orderRepository.save(order);

    // üîπ 5. –û—á–∏—Å—Ç–∏—Ç–∏ –∫–æ—à–∏–∫ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    user.cart.products = [];
    await this.cartRepository.save(user.cart);

    return order;
  }

  /**
   * –û—Ç—Ä–∏–º–∞—Ç–∏ –≤—Å—ñ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
   */
  async getUserOrders(email: string): Promise<Order[]> {
    const user = await this.userRepository.findOne({ where: { email }, relations: ['orders', 'orders.products'] });

    if (!user) {
      throw new NotFoundException(`–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á —ñ–∑ email ${email} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∏–π`);
    }

    return user.orders;
  }
}
