import {
  Injectable,
  ConflictException,
  UnauthorizedException,
} from '@nestjs/common';
import { InjectRepository } from '@nestjs/typeorm';
import { Repository } from 'typeorm';
import * as bcrypt from 'bcryptjs';
import { Response } from 'express';
import { User } from '../user/user.entity';
import { MailService } from '../mail/mail.service';
import { Cart } from '../cart/cart.entity';

@Injectable()
export class AuthService {
  constructor(
    @InjectRepository(User) private readonly userRepository: Repository<User>,
    @InjectRepository(Cart) private readonly cartRepository: Repository<Cart>, // –†–µ–ø–æ–∑–∏—Ç–æ—Ä—ñ–π –∫–æ—à–∏–∫–∞
    private readonly mailService: MailService,
  ) {}

  /**
   * –†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è –Ω–æ–≤–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
   */
  async register(
    name: string,
    email: string,
    password: string,
    res: Response,
  ): Promise<void> {
    try {
      // üîπ 1. –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –≤–∂–µ —ñ—Å–Ω—É—î
      const existingUser = await this.userRepository.findOne({ where: { email } });
      if (existingUser) {
        throw new ConflictException('–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –∑ —Ç–∞–∫–∏–º email –≤–∂–µ —ñ—Å–Ω—É—î');
      }

      // üîπ 2. –•–µ—à—É—î–º–æ –ø–∞—Ä–æ–ª—å
      const hashedPassword = await bcrypt.hash(password, 10);

      // üîπ 3. –°—Ç–≤–æ—Ä—é—î–º–æ –Ω–æ–≤–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
      let user = this.userRepository.create({ name, email, password: hashedPassword });

      // üîπ 4. –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ —É –±–∞–∑—É
      user = await this.userRepository.save(user);

      // üîπ 5. –°—Ç–≤–æ—Ä—é—î–º–æ –∫–æ—à–∏–∫ —ñ –ø—Ä–∏–≤'—è–∑—É—î–º–æ –¥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
      const cart = this.cartRepository.create({ user, cartProducts: [] });
      await this.cartRepository.save(cart);

      // üîπ 6. –û–Ω–æ–≤–ª—é—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞, –¥–æ–¥–∞—é—á–∏ –π–æ–º—É –∫–æ—à–∏–∫
      user.cart = cart;
      await this.userRepository.save(user);

      // üîπ 7. –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –ø—Ä–∏–≤—ñ—Ç–∞–ª—å–Ω–∏–π email
      await this.mailService.sendWelcomeEmail(user.email, user.name);

      // üîπ 8. –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ —É—Å–ø—ñ—à–Ω—É —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—é
      res.status(201).json({ message: '–†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è —É—Å–ø—ñ—à–Ω–∞' });
    } catch (error) {
      console.error('–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó:', error);
      throw error;
    }
  }

  /**
   * –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ (–±–µ–∑ —Ç–æ–∫–µ–Ω–∞)
   */
  async login(email: string, password: string, res: Response): Promise<void> {
    try {
      // üîπ 1. –®—É–∫–∞—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –≤ –±–∞–∑—ñ —Ä–∞–∑–æ–º —ñ–∑ –ø–∞—Ä–æ–ª–µ–º
      const user = await this.userRepository.findOne({ where: { email }, select: ['password'] });

      // üîπ 2. –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —ñ—Å–Ω—É—î –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á —Ç–∞ —á–∏ –ø—Ä–∞–≤–∏–ª—å–Ω–∏–π –ø–∞—Ä–æ–ª—å
      if (!user || !(await bcrypt.compare(password, user.password))) {
        throw new UnauthorizedException('–ù–µ–≤—ñ—Ä–Ω–∏–π email –∞–±–æ –ø–∞—Ä–æ–ª—å');
      }

      // üîπ 3. –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ —É—Å–ø—ñ—à–Ω—É –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—é
      res.status(200).json({ message: '–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—è —É—Å–ø—ñ—à–Ω–∞' });
    } catch (error) {
      console.error('–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó:', error);
      throw error;
    }
  }
}
