import { Injectable, NotFoundException } from '@nestjs/common';
import { InjectRepository } from '@nestjs/typeorm';
import { Repository } from 'typeorm';
import { Cart } from './cart.entity';
import { User } from '../user/user.entity';
import { Product } from '../products/product.entity';
import { CartProduct } from './cart-product.entity';

@Injectable()
export class CartService {
  constructor(
    @InjectRepository(Cart)
    private readonly cartRepository: Repository<Cart>,
    @InjectRepository(User)
    private readonly userRepository: Repository<User>,
    @InjectRepository(Product)
    private readonly productRepository: Repository<Product>,
    @InjectRepository(CartProduct)
    private readonly cartProductRepository: Repository<CartProduct>,
  ) {
  }

  // –î–æ–¥–∞—î –ø—Ä–æ–¥—É–∫—Ç –≤ –∫–æ—à–∏–∫ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ (–∑–∞ email)

  async addProductToCart(email: string, productName: string, quantity: number): Promise<Cart> {
    //  1. –®—É–∫–∞—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ —Ä–∞–∑–æ–º —ñ–∑ –∫–æ—à–∏–∫–æ–º —ñ —Ç–æ–≤–∞—Ä–∞–º–∏ –≤ –Ω—å–æ–º—É
    const user = await this.userRepository.findOne({
      where: { email },
      relations: ['cart', 'cart.cartProducts', 'cart.cartProducts.product'],
    });

    if (!user) {
      throw new NotFoundException(`–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á —ñ–∑ email ${email} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∏–π`);
    }

    //  3. –ë–µ—Ä–µ–º–æ –∫–æ—à–∏–∫ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    const cart = user.cart;

    // üîπ 4. –ó–Ω–∞—Ö–æ–¥–∏–º–æ —Ç–æ–≤–∞—Ä –∑–∞ –Ω–∞–∑–≤–æ—é
    const foundProduct = await this.productRepository.findOne({ where: { name: productName } });
    if (!foundProduct) {
      throw new NotFoundException(`–ü—Ä–æ–¥—É–∫—Ç ${productName} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∏–π`);
    }

    // üîπ 5. –ü–µ—Ä–µ–∫–æ–Ω—É—î–º–æ—Å—è, —â–æ `cart.cartProducts` –∑–∞–≤–∂–¥–∏ —î –º–∞—Å–∏–≤–æ–º
    cart.cartProducts = cart.cartProducts ?? [];

    // üîπ 6. –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —Ç–æ–≤–∞—Ä —É–∂–µ —î —É –∫–æ—à–∏–∫—É
    let cartProduct = cart.cartProducts.find(cp => cp.product.id === foundProduct.id);

    if (cartProduct) {
      // üîπ 7. –Ø–∫—â–æ —Ç–æ–≤–∞—Ä –≤–∂–µ —î, –∑–±—ñ–ª—å—à—É—î–º–æ –π–æ–≥–æ –∫—ñ–ª—å–∫—ñ—Å—Ç—å
      cartProduct.quantity += quantity;
    } else {
      // üîπ 8. –Ø–∫—â–æ —Ç–æ–≤–∞—Ä—É –Ω–µ–º–∞—î, —Å—Ç–≤–æ—Ä—é—î–º–æ –Ω–æ–≤–∏–π `CartProduct`
      cartProduct = this.cartProductRepository.create({
        cart,
        product: foundProduct,
        quantity,
        price: foundProduct.price, // –§—ñ–∫—Å—É—î–º–æ —Ü—ñ–Ω—É –Ω–∞ –º–æ–º–µ–Ω—Ç –¥–æ–¥–∞–≤–∞–Ω–Ω—è
      });

      // üîπ 9. –°–ø–æ—á–∞—Ç–∫—É –∑–±–µ—Ä—ñ–≥–∞—î–º–æ –Ω–æ–≤–∏–π CartProduct —É –ë–î
      cartProduct = await this.cartProductRepository.save(cartProduct);

      // üîπ 10. –î–æ–¥–∞—î–º–æ –∑–±–µ—Ä–µ–∂–µ–Ω–∏–π —Ç–æ–≤–∞—Ä —É –∫–æ—à–∏–∫
      cart.cartProducts.push(cartProduct);
    }

    // üîπ 11. –û–Ω–æ–≤–ª—é—î–º–æ –∫–æ—à–∏–∫ —É –±–∞–∑—ñ
    await this.cartRepository.save(cart);

    // üîπ 12. –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ –æ–Ω–æ–≤–ª–µ–Ω–∏–π –∫–æ—à–∏–∫
    const updatedCart = await this.cartRepository.findOne({
      where: { id: cart.id },
      relations: ['cartProducts', 'cartProducts.product'],
    });

    if (!updatedCart) {
      throw new NotFoundException('–ö–æ—à–∏–∫ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –ø—ñ—Å–ª—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è.');
    }

    return updatedCart;
  }



  /**
   * –û—Ç—Ä–∏–º–∞—Ç–∏ –∫–æ—à–∏–∫ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑–∞ email
   */
  async getCartByEmail(email: string): Promise<Cart> {
    // üîπ 1. –®—É–∫–∞—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ —Ä–∞–∑–æ–º —ñ–∑ –∫–æ—à–∏–∫–æ–º —ñ —Ç–æ–≤–∞—Ä–∞–º–∏ –≤ –Ω—å–æ–º—É
    const user = await this.userRepository.findOne({
      where: { email },
      relations: ['cart', 'cart.cartProducts', 'cart.cartProducts.product'], // –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –≤—Å—ñ –ø–æ–≤'—è–∑–∞–Ω—ñ –¥–∞–Ω—ñ
    });

    // üîπ 2. –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –∑–Ω–∞–π–¥–µ–Ω–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ —ñ —á–∏ —É –Ω—å–æ–≥–æ —î –∫–æ—à–∏–∫
    if (!user || !user.cart) {
      throw new NotFoundException(`–ö–æ—à–∏–∫ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑ email ${email} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∏–π`);
    }

    // üîπ 3. –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ –æ–±'—î–∫—Ç –∫–æ—à–∏–∫–∞ —Ä–∞–∑–æ–º —ñ–∑ —Ç–æ–≤–∞—Ä–∞–º–∏
    return user.cart;
  }

  /**
   * –í–∏–¥–∞–ª–∏—Ç–∏ –ø—Ä–æ–¥—É–∫—Ç —ñ–∑ –∫–æ—à–∏–∫–∞
   */
  async removeProductFromCart(email: string, productName: string): Promise<Cart> {
    // üîπ 1. –®—É–∫–∞—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ —Ä–∞–∑–æ–º —ñ–∑ –∫–æ—à–∏–∫–æ–º —ñ —Ç–æ–≤–∞—Ä–∞–º–∏
    const user = await this.userRepository.findOne({
      where: { email },
      relations: ['cart', 'cart.cartProducts', 'cart.cartProducts.product'], // –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –∑–≤‚Äô—è–∑–∫–∏
    });

    // üîπ 2. –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –∑–Ω–∞–π–¥–µ–Ω–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ —ñ —á–∏ —É –Ω—å–æ–≥–æ —î –∫–æ—à–∏–∫
    if (!user || !user.cart) {
      throw new NotFoundException(`–ö–æ—à–∏–∫ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑ email ${email} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∏–π`);
    }

    // üîπ 3. –û—Ç—Ä–∏–º—É—î–º–æ –∫–æ—à–∏–∫ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    const cart = user.cart;

    // üîπ 4. –ó–Ω–∞—Ö–æ–¥–∏–º–æ —Ç–æ–≤–∞—Ä —É –∫–æ—à–∏–∫—É –∑–∞ –Ω–∞–∑–≤–æ—é
    const cartProduct = cart.cartProducts.find(
      (cp) => cp.product.name === productName,
    );

    if (!cartProduct) {
      throw new NotFoundException(`–¢–æ–≤–∞—Ä ${productName} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ —É –∫–æ—à–∏–∫—É`);
    }

    // üîπ 5. –í–∏–¥–∞–ª—è—î–º–æ —Ç–æ–≤–∞—Ä —ñ–∑ –±–∞–∑–∏ (–ø—Ä–æ–º—ñ–∂–Ω—É —Ç–∞–±–ª–∏—Ü—é `CartProduct`)
    await this.cartProductRepository.remove(cartProduct);

    // üîπ 6. –û–Ω–æ–≤–ª—é—î–º–æ –∫–æ—à–∏–∫ —ñ –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ –π–æ–≥–æ
    const updatedCart = await this.cartRepository.findOne({
      where: { id: cart.id },
      relations: ['cartProducts', 'cartProducts.product'],
    });

    if (!updatedCart) {
      throw new NotFoundException('–ö–æ—à–∏–∫ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –ø—ñ—Å–ª—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è.');
    }

    return updatedCart;
  }
}
